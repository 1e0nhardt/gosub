class_name Util
extends Node

const ASS_TEMPLATE = """[Script Info]
; Script generated by 1e0nhardt's bilingual subtitle tool
; https://github.com/1e0nhardt/BilinguSubs
ScriptType: v4.00+
ScaledBorderAndShadow: Yes
PlayResX: 1920
PlayResY: 1080
WrapStyle: 0

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: EN,Resource Han Rounded CN Regular,40,&H00FFFFFF,&HF0000000,&H00000000,&H32000000,0,0,0,0,100,100,0,0,1,2,1,2,5,5,15,1
Style: ZH,Resource Han Rounded CN Regular,64,&H00FFFFFF,&HF00000FF,&H00000000,&H32000000,-1,0,0,0,100,100,0,0,1,2,1,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""

const ASS_DIALOG_FORMAT = "Dialogue: %d,%s,%s,ZH,,0,0,0,,%s\\N{\\rEN}%s\n"
const ASS_DIALOG_FORMAT_ONLY_FIRST = "Dialogue: %d,%s,%s,ZH,,0,0,0,,%s\n"

static var start_time: int


static func get_suffix(filepath: String) -> String:
    return filepath.rsplit(".", true, 1)[1].to_lower()


static func get_parent_dir(filepath: String) -> String:
    return filepath.rsplit("/", true, 1)[0]


static func get_stem(filepath: String) -> String:
    return filepath.rsplit("/", true, 1)[1].split(".")[0]


static func reset_start_time():
    start_time = Time.get_ticks_usec()


@warning_ignore_start("integer_division")
static func print_time_cost(desc: String = "Segment"):
    var msg := ""
    var time_cost: int = Time.get_ticks_usec() - start_time
    var us = time_cost - time_cost / 1000 * 1000
    time_cost /= 1000
    if time_cost == 0:
        msg = "%s time cost: %dus" % [desc, us]
    else:
        var ms = time_cost - time_cost / 1000 * 1000
        time_cost /= 1000
        if time_cost == 0:
            msg = "%s time cost: %d_%03dus" % [desc, ms, us]
        else:
            msg = "%s time cost: %d_%03d_%03dus" % [desc, time_cost, ms, us]
    Logger.info(msg)


static func time_float2str(time: float, format = "ass") -> String:
    var seconds: int = int(time)
    var ms = time - seconds
    if format == "ass":
        ms = int(ms * 100)
    else:
        ms = int(ms * 1000)
    var minutes = seconds / 60
    seconds %= 60
    var hours = minutes / 60
    minutes %= 60
    if format == "ass":
        return "%02d:%02d:%02d.%02d" % [hours, minutes, seconds, ms]
    else:
        return "%02d:%02d:%02d,%03d" % [hours, minutes, seconds, ms]
@warning_ignore_restore("integer_division")


static func time_str2float(time_str: String, format = "ass") -> float:
    var tmp_arr = time_str.strip_edges().split(':')
    var hrs = tmp_arr[0]
    var mins = tmp_arr[1]
    var sec_ms = tmp_arr[2]
    var seconds
    var ms
    if format == "ass":
        tmp_arr = sec_ms.split(".")
        tmp_arr[1] += "0"
    else:
        tmp_arr = sec_ms.split(",")
    seconds = tmp_arr[0]
    ms = tmp_arr[1]
    return float(int(hrs) * 3600 + int(mins) * 60 + int(seconds)) + int(ms) / 1000.0
